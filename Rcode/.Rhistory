x.drug = 100*rexp(n, rate=1/mu.drug)
x.nodrug = 100*rexp(n, rate=1/mu.nodrug)
return(mean(x.drug)- mean(x.nodrug))
}
sim.drug.effect()
out <- c()
for( i in 1:1000){
temp = sim.drug.effect(n = i)
if (temp > 100){
out <- c(out,temp)
}
length(out)
}
out <- c()
for( i in 1:1000){
temp = sim.drug.effect(n = i)
if (temp > 100){
out <- c(out,temp)
}
}
length(out)
test <- c()
for(i in 1:1000){
for(j in 5:100){
temp = sim.drug.effect(n = j)
if (temp > 100){
test <- c(test, temp)
}
}
}
plot(test)
head(state.x77)
state.x77$Frost >= 150
state.x77[.'Frost'] >= 150
state.x77[,'Frost'] >= 150
sum(state.x77[,'Frost'] >= 150)
sum(state.x77[,'Frost'] >= 150)
which(state.x77[,'Frost'] >= 150)
sum(state.x77[,'Area'] >= 10000)
which(state.x77[,'Area'] >= 10000)
sum(state.x77[,'Area'] >= 10000 & state.x77[,'Murder'] >= 12)
sum(state.x77[,'Frost'] >= 150)
which(state.x77[,'Frost'] >= 150)
sum(state.x77[,'Area'] >= 10000)
which(state.x77[,'Area'] >= 10000)
sum(state.x77[,'Area'] >= 10000 & state.x77[,'Murder'] >= 12)
which(state.x77[,'Area'] >= 10000 & state.x77[,'Murder'] >= 12)
apply(state.x77, MARGIN=2, FUN=summary) # Summary of each col, get back matrix!
colMeans(state.x77)
cor.v1.v2 <- function(v1, v2 = state.x77[,'Frost']){
return( cor(v1,v2))
}
cor.v1.v2 <- function(v1, v2 = state.x77[,'Frost']){
return( cor(v1,v2))
}
cor.v1.v2(v1=state.x77[,"Frost"])
cor.v1.v2 <- function(v1, v2 = state.x77[,'Frost']){
return( cor(v1,v2))
}
cor.v1.v2(v1=state.x77[,"Frost"])
cor.v1.v2(v1=state.x77[,"Life Exp"])
#apply(state.x77, MARGIN=2, FUN=summary) # Summary of each col, get back matrix!
colMeans(state.x77)
apply(state.x77, fun = cor.v1.v2, v1 = state.x77[,colnames(state.x77)] )
apply(state.x77, fun = cor.v1.v2, v1 = colnames(state.x77) )
apply(state.x77, fun = cor.v1.v2(v1) )
apply(state.x77, fun = cor.v1.v2 )
apply(state.x77, fun = cor.v1.v2(v1 = colnames(state.x77))  )
apply(state.x77, fun = cor.v1.v2, v1 = colnames(state.x77)  )
apply(state.x77, MARGIN=2, fun = cor.v1.v2, v1 = colnames(state.x77)  )
apply(state.x77, MARGIN=2, fun = cor.v1.v2  )
apply(state.x77, MARGIN=2, FUN = cor.v1.v2  )
state.x77
library(ggplot2)
plot1 <- ggplot(state.x77)
plot1 + aes(x = Frost, y = Illiteracy) + geom_point()
plot1
plot(x = state.x77[,'Frost'], y = state.x77[,'Illiteracy'])
plot(x = state.x77[,'Frost'], y = state.x77[,'Illiteracy'])
plot(x = state.x77[,'Frost'], y = state.x77[,'Murder'])
plot(x = state.x77[,'Frost'], y = state.x77[,'Illiteracy'], main = "Illiteracy vs Days of Frost")
plot(x = state.x77[,'Frost'], y = state.x77[,'Murder'], main = "Murder Rate vs Days of Frost")
plot(xvec <- seq(-3,3,length=101), xvec^3)
text(-1, 15, paste("Pearson's correlation:",
round(cor(xvec, xvec^3, method="pearson"),3))) # Default
text(-1, 20, paste("Spearman's correlation:",
round(cor(xvec, xvec^3, method="spearman"),3)))
cor.v1.v2 <- function(v1= NULL, v2 = state.x77[,'Frost'], methods = "pearson"){
return( cor(v1,v2, method = methods))
}
cor.v1.v2 <- function(v1= NULL, v2 = state.x77[,'Frost'], methods = "pearson"){
return( cor(v1,v2, method = methods))
}
cor.v1.v2(v1=state.x77[,"Life Exp"], method="spearman")
cor.v1.v2 <- function(v1= NULL, v2 = state.x77[,'Frost'], methods = "pearson"){
return( cor(v1,v2, method = methods))
}
cor.v1.v2(v1=state.x77[,"Life Exp"], method="spearman")
cor.v1.v2(v1=state.x77[,"Frost"], method="spearman")
apply(state.x77, FUN = cor.v1.v2, methods = "spearman")
apply(state.x77,MARGIN = 2, FUN = cor.v1.v2, methods = "spearman")
add.up.inv.powers = function(n, verbose=FALSE) {
x = 0
for (i in 1:n) {
x = x + i^(1/i)
if (verbose) roman.cat(i)
}
if (verbose) cat("\n")
return(x)
}
roman.cat = function(num) {
roman.num = as.roman(num)
roman.str = as.character(roman.num)
cat(roman.str, "... ")
}
add.up.inv.powers(n=3, verb=FALSE)
add.up.inv.powers(n=5, verb=FALSE)
add.up.inv.powers(n=10, verb=FALSE)
# Your code goes here
# Your code goes here
# Your code goes here
add.up.inv.powers = function(n, verbose=FALSE) {
browser()
x = 0
for (i in 1:n) {
x = x + i^(1/i)
if (verbose) roman.cat(i)
}
if (verbose) cat("\n")
return(x)
}
# Your code goes here
# Your code goes here
# Your code goes here
add.up.inv.powers = function(n, verbose=FALSE) {
x = 0
browser()
for (i in 1:n) {
x = x + i^(1/i)
if (verbose) roman.cat(i)
}
if (verbose) cat("\n")
return(x)
}
# Your code goes here
# Your code goes here
# Your code goes here
add.up.inv.powers = function(n, verbose=FALSE) {
x = 0
browser()
for (i in 1:n) {
x = x + i^(1/i)
if (verbose) roman.cat(i)
}
if (verbose) cat("\n")
return(x)
}
add.up.inv.powers(n=5, verb=FALSE)
# Your code goes here
# Your code goes here
# Your code goes here
add.up.inv.powers = function(n, verbose=FALSE) {
x = 0
browser()
for (i in 1:n) {
x = x + i^(1/i)
if (verbose) roman.cat(i)
}
if (verbose) cat("\n")
return(x)
}
add.up.inv.powers(n=5, verb=FALSE)
# Your code goes here
# Your code goes here
# Your code goes here
add.up.inv.powers = function(n, verbose=FALSE) {
x = 0
browser()
for (i in 1:n) {
x = x + i^(1/i)
if (verbose) roman.cat(i)
}
if (verbose) cat("\n")
return(x)
}
add.up.inv.powers(n=5, verb=FALSE)
# Your code goes here
# Your code goes here
# Your code goes here
add.up.inv.powers = function(n, verbose=FALSE) {
x = 0
browser()
for (i in 1:n) {
x = x + i^(1/i)
if (verbose) roman.cat(i)
}
if (verbose) cat("\n")
return(x)
}
add.up.inv.powers(n=5, verb=FALSE)
fibonacci = function(n) {
my.fib = c(1,1)
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
fibonacci(2) # Should be 1
fibonacci(3) # Should be 2
fibonacci(5) # Should be 5
fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
fibonacci(2) # Should be 1
fibonacci(3) # Should be 2
fibonacci(5) # Should be 5
fibonacci(9) # Should be 34
fibonacci = function(n) {
#browser()
my.fib = c(1,1)
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
fibonacci(2) # Should be 1
fibonacci(3) # Should be 2
fibonacci(5) # Should be 5
fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
fibonacci(2) # Should be 1
fibonacci(3) # Should be 2
fibonacci(5) # Should be 5
fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
#fibonacci(2) # Should be 1
#fibonacci(3) # Should be 2
#fibonacci(5) # Should be 5
#fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
#fibonacci(2) # Should be 1
#fibonacci(3) # Should be 2
#fibonacci(5) # Should be 5
#fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
if (n <= 1){
return(1)
}
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
#fibonacci(2) # Should be 1
#fibonacci(3) # Should be 2
#fibonacci(5) # Should be 5
#fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
if (n <= 2){
return(1)
}
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
fibonacci(2) # Should be 1
fibonacci(3) # Should be 2
fibonacci(5) # Should be 5
fibonacci(9) # Should be 34
input.list = list(0, 1, 2, -1, "Jessica", exp(1), exp(pi))
for (i in 1:length(input.list)) {
cat(paste("We are at iteration", i, "with x =", input.list[[i]],
"and log(x) =", log(input.list[[i]]), "\n"))
}
robust.log <- function(x){
if(!is.numeric(x)){
warning("x is not of type nueric")
return(NULL)
}
else{
return(log(x))
}
}
for (i in 1:length(input.list)) {
cat(paste("We are at iteration", i, "with x =", input.list[[i]],
"and log(x) =", robust.log(input.list[[i]]), "\n"))
}
input.list = list(0, 1, 2, -1, "Jessica", exp(1), exp(pi))
robust.log <- function(x){
if(!is.numeric(x)){
warning("x is not of type nueric")
return(NULL)
}
else{
return(log(x))
}
}
for (i in 1:length(input.list)) {
cat(paste("We are at iteration", i, "with x =", input.list[[i]],
"and log(x) =", robust.log(input.list[[i]]), "\n"))
}
fibonacci = function(n) {
if(!is.integer(n) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
n=20
(!is.integer(n) || n < 0)
is.integer(20)
fibonacci = function(n) {
if(!(all.equal(a, as.integer(a))) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci = function(n) {
if(!(all.equal(n, as.integer(n))) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci("hi")
fibonacci(matrix(1:4, 2, 2))
fibonacci(list(x=0, y=1))
fibonacci = function(n) {
if( !(x%%1==0) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci = function(n) {
if( !(n%%1==0) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci("hi")
fibonacci(matrix(1:4, 2, 2))
fibonacci(list(x=0, y=1))
fibonacci = function(n) {
if(!(is.numeric(n))){
warning("N is not nnumneric")
return(NA)
}
if( !(n%%1==0) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci("hi")
fibonacci(matrix(1:4, 2, 2))
fibonacci(list(x=0, y=1))
get.wordtab = function(str.url, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.numbers=FALSE) {
lines = readLines(str.url)
text = paste(lines, collapse=" ")
words = strsplit(text, split=split)[[1]]
words = words[words != ""]
# Convert to lower case, if we're asked to
if (tolower) words = tolower(words)
# Get rid of words with numbers, if we're asked to
if (!keep.numbers)
words = grep("[0-9]", words, inv=TRUE, val=TRUE)
table(words)
}
get.wordtabs = function(str.urls, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.numbers=FALSE) {
wordtabs = list()
for (i in 1:length(str.urls)) {
cat(paste("* Website:",str.urls[i],"\n"))
wordtabs[[i]] = get.wordtab(str.urls[i], split, tolower, keep.numbers)
}
return(wordtabs)
}
str.urls = c("http://stat.cmu.edu/~ryantibs/research.html",
"www.this.is.not.a.real.website.com",
"http://stat.cmu.edu/~ryantibs/teaching.html")
wordtab = get.wordtab(str.urls[2])
wordtabs = get.wordtabs(str.urls)
get.wordtab = function(str.url, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.numbers=FALSE) {
lines = tryCatch(readLines(str.url))
text = paste(lines, collapse=" ")
words = strsplit(text, split=split)[[1]]
words = words[words != ""]
# Convert to lower case, if we're asked to
if (tolower) words = tolower(words)
# Get rid of words with numbers, if we're asked to
if (!keep.numbers)
words = grep("[0-9]", words, inv=TRUE, val=TRUE)
table(words)
}
get.wordtabs = function(str.urls, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.numbers=FALSE) {
wordtabs = list()
for (i in 1:length(str.urls)) {
cat(paste("* Website:",str.urls[i],"\n"))
wordtabs[[i]] = get.wordtab(str.urls[i], split, tolower, keep.numbers)
}
return(wordtabs)
}
str.urls = c("http://stat.cmu.edu/~ryantibs/research.html",
"www.this.is.not.a.real.website.com",
"http://stat.cmu.edu/~ryantibs/teaching.html")
wordtab = get.wordtab(str.urls[2])
wordtabs = get.wordtabs(str.urls)
installed.packages("ggplot2movies")
installed.packages("ggplot2movies")
library(ggplot2)
library(wordcloud)
library(tm)
library(stringr)
library(ggthemes)
library(cluster)
# Read Data
MALdf <- read.csv("MALData.csv")
setwd("~/Documents/pds_fin/MALDataScience/Rcode")
# Read Data
MALdf <- read.csv("MALData.csv")
cleanTextAll <- paste(MALdf$synopsis, collapse=" ")
#action_text <- paste(MAL_action$synopsis, collapse = " ")
textSource <- VectorSource(cleanTextAll)
textCorpus <- Corpus(textSource)
textCorpus <- tm_map(textCorpus,content_transformer(tolower))
textCorpus <- tm_map(textCorpus,stripWhitespace)
textCorpus <- tm_map(textCorpus,removePunctuation)
textCorpus <- tm_map(textCorpus,removeNumbers)
textCorpusStop <- tm_map(textCorpus,removeWords,stopwords("english"))
textCorpusStop <- tm_map(textCorpusStop,removeWords,c("source", "anidb", "ann", "mal"))
dtm  <- DocumentTermMatrix(textCorpusStop)
# Source
#https://rstudio-pubs-static.s3.amazonaws.com/31867_8236987cf0a8444e962ccd2aec46d9c3.html
# remove sparce
dtm_rem_s <- removeSparseTerms(dtm, 0.15)
d <- dist(t(dtm_rem_s), method="euclidian")
fit <- hclust(d=d, method="ward")
fit
plot(fit, hang=-1)
library(fpc)
library(cluster)
install.packages("fpc")
library(fpc)
library(cluster)
kfit <- kmeans(d, 10)
clusplot(as.matrix(d), kfit$cluster, color=T, shade=T, labels=2, lines=0)

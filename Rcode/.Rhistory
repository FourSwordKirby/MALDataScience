#fibonacci(3) # Should be 2
#fibonacci(5) # Should be 5
#fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
#fibonacci(2) # Should be 1
#fibonacci(3) # Should be 2
#fibonacci(5) # Should be 5
#fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
if (n <= 1){
return(1)
}
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
#fibonacci(2) # Should be 1
#fibonacci(3) # Should be 2
#fibonacci(5) # Should be 5
#fibonacci(9) # Should be 34
fibonacci = function(n) {
browser()
my.fib = c(1,1)
if (n <= 2){
return(1)
}
for (i in 2:(n-1)) my.fib[i+1] = my.fib[i] + my.fib[i-1]
return(my.fib[i])
}
fibonacci(1) # Should be 1
fibonacci(2) # Should be 1
fibonacci(3) # Should be 2
fibonacci(5) # Should be 5
fibonacci(9) # Should be 34
input.list = list(0, 1, 2, -1, "Jessica", exp(1), exp(pi))
for (i in 1:length(input.list)) {
cat(paste("We are at iteration", i, "with x =", input.list[[i]],
"and log(x) =", log(input.list[[i]]), "\n"))
}
robust.log <- function(x){
if(!is.numeric(x)){
warning("x is not of type nueric")
return(NULL)
}
else{
return(log(x))
}
}
for (i in 1:length(input.list)) {
cat(paste("We are at iteration", i, "with x =", input.list[[i]],
"and log(x) =", robust.log(input.list[[i]]), "\n"))
}
input.list = list(0, 1, 2, -1, "Jessica", exp(1), exp(pi))
robust.log <- function(x){
if(!is.numeric(x)){
warning("x is not of type nueric")
return(NULL)
}
else{
return(log(x))
}
}
for (i in 1:length(input.list)) {
cat(paste("We are at iteration", i, "with x =", input.list[[i]],
"and log(x) =", robust.log(input.list[[i]]), "\n"))
}
fibonacci = function(n) {
if(!is.integer(n) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
n=20
(!is.integer(n) || n < 0)
is.integer(20)
fibonacci = function(n) {
if(!(all.equal(a, as.integer(a))) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci = function(n) {
if(!(all.equal(n, as.integer(n))) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci("hi")
fibonacci(matrix(1:4, 2, 2))
fibonacci(list(x=0, y=1))
fibonacci = function(n) {
if( !(x%%1==0) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci = function(n) {
if( !(n%%1==0) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci("hi")
fibonacci(matrix(1:4, 2, 2))
fibonacci(list(x=0, y=1))
fibonacci = function(n) {
if(!(is.numeric(n))){
warning("N is not nnumneric")
return(NA)
}
if( !(n%%1==0) || n < 0){
warning("N not int or less than zero")
return(NA)
}
if (n==1 || n==2) return(1)
my.fib = c(1,1)
for (i in 3:n) my.fib[i] = my.fib[i-1] + my.fib[i-2]
return(my.fib[n])
}
fibonacci(20)
fibonacci(-1)
fibonacci(1.5)
fibonacci("hi")
fibonacci(matrix(1:4, 2, 2))
fibonacci(list(x=0, y=1))
get.wordtab = function(str.url, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.numbers=FALSE) {
lines = readLines(str.url)
text = paste(lines, collapse=" ")
words = strsplit(text, split=split)[[1]]
words = words[words != ""]
# Convert to lower case, if we're asked to
if (tolower) words = tolower(words)
# Get rid of words with numbers, if we're asked to
if (!keep.numbers)
words = grep("[0-9]", words, inv=TRUE, val=TRUE)
table(words)
}
get.wordtabs = function(str.urls, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.numbers=FALSE) {
wordtabs = list()
for (i in 1:length(str.urls)) {
cat(paste("* Website:",str.urls[i],"\n"))
wordtabs[[i]] = get.wordtab(str.urls[i], split, tolower, keep.numbers)
}
return(wordtabs)
}
str.urls = c("http://stat.cmu.edu/~ryantibs/research.html",
"www.this.is.not.a.real.website.com",
"http://stat.cmu.edu/~ryantibs/teaching.html")
wordtab = get.wordtab(str.urls[2])
wordtabs = get.wordtabs(str.urls)
get.wordtab = function(str.url, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.numbers=FALSE) {
lines = tryCatch(readLines(str.url))
text = paste(lines, collapse=" ")
words = strsplit(text, split=split)[[1]]
words = words[words != ""]
# Convert to lower case, if we're asked to
if (tolower) words = tolower(words)
# Get rid of words with numbers, if we're asked to
if (!keep.numbers)
words = grep("[0-9]", words, inv=TRUE, val=TRUE)
table(words)
}
get.wordtabs = function(str.urls, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.numbers=FALSE) {
wordtabs = list()
for (i in 1:length(str.urls)) {
cat(paste("* Website:",str.urls[i],"\n"))
wordtabs[[i]] = get.wordtab(str.urls[i], split, tolower, keep.numbers)
}
return(wordtabs)
}
str.urls = c("http://stat.cmu.edu/~ryantibs/research.html",
"www.this.is.not.a.real.website.com",
"http://stat.cmu.edu/~ryantibs/teaching.html")
wordtab = get.wordtab(str.urls[2])
wordtabs = get.wordtabs(str.urls)
installed.packages("ggplot2movies")
installed.packages("ggplot2movies")
setwd("~/Documents/pds_fin/MALDataScience/Rcode")
library(ggplot2)
library(wordcloud)
library(tm)
library(stringr)
library(ggthemes)
library(cluster)
library(dendextend)
# Read Data
MALdf <- read.csv("MALData.csv")
# subset
#MAL_shounen, MAL_comedy, MAL_romance, MAL_drama, MAL_psychological, MAL_space
MAL_shounen <- subset(MALdf, shounen == 1)
MAL_comedy <- subset(MALdf, comedy == 1)
MAL_drama <- subset(MALdf, drama == 1)
MAL_romance <- subset(MALdf, romance == 1)
MAL_psychological <- subset(MALdf, psychological == 1)
MAL_space <- subset(MALdf, space == 1)
MAL_space_t <- paste(MAL_space$synopsis, collapse = " ")
MAL_shounen_t <- paste(MAL_shounen$synopsis, collapse = " ")
MAL_psychological_t <- paste(MAL_psychological$synopsis, collapse = " ")
MAL_romance_t <- paste(MAL_romance$synopsis, collapse = " ")
MAL_drama_t <- paste(MAL_drama$synopsis, collapse = " ")
MAL_comedy_t <- paste(MAL_comedy$synopsis, collapse =  " ")
cleanTextAll <- paste(MALdf$synopsis, collapse=" ")
shounen_text <- paste(MAL_shounen$synopsis, collapse = " ")
romacne_text <- paste(MAL_romance$synopsis, collapse = " ")
textSource <- VectorSource(shounen_text)
textCorpus <- Corpus(textSource)
textCorpus <- tm_map(textCorpus,content_transformer(tolower))
textCorpus <- tm_map(textCorpus,stripWhitespace)
textCorpus <- tm_map(textCorpus,removePunctuation)
textCorpus <- tm_map(textCorpus,removeNumbers)
textCorpusStop <- tm_map(textCorpus,removeWords,stopwords("english"))
textCorpusStop <- tm_map(textCorpusStop,removeWords,c("source", "anidb", "ann", "mal"))
dtm  <- DocumentTermMatrix(textCorpusStop)
dtm_rem_s <- removeSparseTerms(dtm, 0.15)
inspect(dtm_rem_s)
dtm_rem_s <- removeSparseTerms(dtm, 0.05)
inspect(dtm_rem_s)
dtm_rem_s <- removeSparseTerms(dtm, 0.01)
inspect(dtm_rem_s)
# Source
#https://rstudio-pubs-static.s3.amazonaws.com/31867_8236987cf0a8444e962ccd2aec46d9c3.html
# remove sparce
d <- dist(t(dtm_rem_s), method="euclidian")
fit <- hclust(d=d, method="ward")
plot.new()
plot(fit, hang=-1)
groups <- cutree(fit, k=5)   # "k=" defines the number of clusters you are using
bee_movie <- readLines("http://www.script-o-rama.com/movie_scripts/a1/bee-movie-script-transcript-seinfeld.html")
bee_movie_lines <- paste(bee_movie, collapse = " " )
textSource <- VectorSource(bee_movie_lines)
textCorpus <- Corpus(textSource)
textCorpus <- tm_map(textCorpus,content_transformer(tolower))
textCorpus <- tm_map(textCorpus,stripWhitespace)
textCorpus <- tm_map(textCorpus,removePunctuation)
textCorpus <- tm_map(textCorpus,removeNumbers)
textCorpus <- tm_map(textCorpus,removeWords,stopwords("english"))
dtm  <- DocumentTermMatrix(textCorpus)
dtm_df<-as.data.frame(as.matrix(dtm))
# dtm_df <- as.data.frame(dtm)
frequency_stms <- colSums(dtm_df)
frequency_stms <- sort(frequency_stms, decreasing=TRUE)
words <- names(frequency_stms)
d <- dist(t(dtm), method="euclidian")
fit <- hclust(d=d, method="ward")
plot.new()
plot(fit, hang=-1)
groups <- cutree(fit, k=5)   # "k=" defines the number of clusters you are using
d <- dist(t(dtm), method="euclidian")
fit <- hclust(d=d)
plot.new()
plot(fit, hang=-1.horiz =  TRUE,  nodePar = list(cex = .007))
groups <- cutree(fit, k=5)   # "k=" defines the number of clusters you are using
d <- dist(t(dtm), method="euclidian")
fit <- hclust(d=d)
plot.new()
plot(fit, hang=-1,horiz =  TRUE,  nodePar = list(cex = .007))
groups <- cutree(fit, k=5)   # "k=" defines the number of clusters you are using
d <- dist(t(dtm), method="euclidian")
fit <- hclust(d=d, method = "complete")
dend <- as.dendrogram(fit)
dend <- rotate(dend, 1:150)
dend <- color_branches(dend, k=3)
dend <- hang.dendrogram(dend,hang_height=0.1)
dend <- set(dend, "labels_cex", 0.25)
plot(dend,  horiz =  TRUE,  nodePar = list(cex = .007))
findAssocs(dtm, c("school","world"), corlimit=0.98)
dtm
findAssocs(dtm, corlimit=0.98)
all_texts <- c(
MAL_action_t<- paste(MAL_action$synopsis, collapse =  " " ),
MAL_adventure_t <- paste(MAL_adventure$synopsis, collapse =  " " ),
MAL_cars_t  <- paste(MAL_cars$synopsis, collapse =  " " ),
MAL_comedy_t <- paste(MAL_comedy$synopsis, collapse =  " "),
MAL_dementia_t <- paste(MAL_dementia$synopsis, collapse = " "),
MAL_demons_t <- paste(MAL_demons$synopsis, collapse = " "),
MAL_drama_t <- paste(MAL_drama$synopsis, collapse = " "),
MAL_ecchi_t <- paste(MAL_ecchi$synopsis, collapse = " "),
MAL_fantasy_t <- paste(MAL_fantasy$synopsis, collapse = " "),
MAL_game_t <- paste(MAL_game$synopsis, collapse = " "),
MAL_harem_t <- paste(MAL_harem$synopsis, collapse = " "),
MAL_historical_t <- paste(MAL_historical$synopsis, collapse = " "),
MAL_horror_t <- paste(MAL_horror$synopsis, collapse = " "),
MAL_josei_t <- paste(MAL_josei$synopsis, collapse = " "),
MAL_kids_t <- paste(MAL_kids$synopsis, collapse = " "),
MAL_magic_t <- paste(MAL_magic$synopsis, collapse = " "),
MAL_martialarts_t <- paste(MAL_martialarts$synopsis, collapse = " "),
MAL_mecha_t <- paste(MAL_mecha$synopsis, collapse = " "),
MAL_military_t <- paste(MAL_military$synopsis, collapse = " "),
MAL_music_t <- paste(MAL_music$synopsis, collapse = " "),
MAL_mystery_t <- paste(MAL_mystery$synopsis, collapse = " "),
MAL_nogenres_t <- paste(MAL_nogenres$synopsis, collapse = " "),
MAL_parody_t <- paste(MAL_parody$synopsis, collapse = " "),
MAL_police_t <- paste(MAL_police$synopsis, collapse = " "),
MAL_psychological_t <- paste(MAL_psychological$synopsis, collapse = " "),
MAL_romance_t <- paste(MAL_romance$synopsis, collapse = " "),
MAL_samurai_t <- paste(MAL_samurai$synopsis, collapse = " "),
MAL_school_t <- paste(MAL_school$samurai, collapse = " "),
MAL_scifi_t <- paste(MAL_scifi$synopsis, collapse = " "),
MAL_seinen_t <- paste(MAL_seinen$synopsis, collapse = " "),
MAL_shoujo_t <- paste(MAL_shoujo$synopsis, collapse = " "),
MAL_shoujo.ai_t <- paste(MAL_shoujo.ai$synopsis, collapse = " "),
MAL_shounen_t <- paste(MAL_shounen$synopsis, collapse = " "),
MAL_shounenai_t <- paste(MAL_shounenai$synopsis, collapse = " "),
MAL_sliceoflife_t <- paste(MAL_sliceoflife$synopsis, collapse = " "),
MAL_space_t <- paste(MAL_space$synopsis, collapse = " "),
MAL_supernatural_t <- paste(MAL_supernatural$synopsis, collapse = " "),
MAL_superpower_t <- paste(MAL_superpower$synopsis, collapse = " "),
MAL_thriller_t <- paste(MAL_thriller$synopsis, collapse = " "),
MAL_vampire_t <- paste(MAL_vampire$synopsis, collapse = " "),
MAL_yaoi_t <- paste(MAL_yaoi$synopsis, collapse = " "),
MAL_yuri_t <- paste(MAL_yuri$synopsis, collapse = " ")
)
all_genre_df <- c(
MAL_action <- subset(MALdf, action == 1),
MAL_adventure <- subset(MALdf, adventure == 1),
MAL_comedy <- subset(MALdf, comedy == 1),
MAL_drama <- subset(MALdf, drama == 1),
MAL_scifi <- subset(MALdf, sci.fi == 1),
MAL_space <- subset(MALdf, space == 1),
MAL_martialarts <- subset(MALdf, martial.arts == 1),
MAL_school <- subset(MALdf, school == 1),
MAL_shounen <- subset(MALdf, shounen == 1),
MAL_demons <- subset(MALdf, demons == 1),
MAL_fantasy <- subset(MALdf, fantasy == 1),
MAL_magic <- subset(MALdf, magic == 1),
MAL_superpower <- subset(MALdf, super.power == 1 ),
MAL_historical <- subset(MALdf, historical == 1),
MAL_romance <- subset(MALdf, romance == 1),
MAL_shounenai <- subset(MALdf, shounen.ai == 1),
MAL_supernatural <- subset(MALdf, supernatural == 1),
MAL_mecha <- subset(MALdf, mecha == 1),
MAL_military <- subset(MALdf, military == 1),
MAL_kids <- subset(MALdf, kids == 1),
MAL_horror <- subset(MALdf, horror == 1),
MAL_sports <- subset(MALdf, sports ==1),
MAL_sliceoflife <- subset(MALdf, slice.of.life == 1),
MAL_samurai <- subset(MALdf, samurai == 1),
MAL_harem <- subset(MALdf, harem == 1),
MAL_shoujo <- subset(MALdf, shoujo == 1),
MAL_ecchi <- subset(MALdf, ecchi == 1),
MAL_mystery <- subset(MALdf, mystery == 1),
MAL_psychological <- subset(MALdf, psychological == 1),
MAL_parody <- subset(MALdf, parody == 1),
MAL_vampire <- subset(MALdf, vampire == 1),
MAL_cars <- subset(MALdf, cars == 1),
MAL_seinen <- subset(MALdf, seinen == 1),
MAL_police <- subset(MALdf, police == 1),
MAL_music <- subset(MALdf, music == 1),
MAL_dementia <- subset(MALdf, dementia== 1),
MAL_game <- subset(MALdf,game == 1 ),
MAL_thriller <- subset(MALdf, thriller == 1),
MAL_yuri <- subset(MALdf, yuri == 1),
MAL_josei <- subset(MALdf,josei == 1),
MAL_shoujo.ai <- subset(MALdf, shoujo.ai == 1),
MAL_yaoi <- subset(MALdf, yaoi == 1),
MAL_nogenres <- subset(MALdf, no.genres.have.been.added.yet. == 1))
all_texts <- c(
MAL_action_t<- paste(MAL_action$synopsis, collapse =  " " ),
MAL_adventure_t <- paste(MAL_adventure$synopsis, collapse =  " " ),
MAL_cars_t  <- paste(MAL_cars$synopsis, collapse =  " " ),
MAL_comedy_t <- paste(MAL_comedy$synopsis, collapse =  " "),
MAL_dementia_t <- paste(MAL_dementia$synopsis, collapse = " "),
MAL_demons_t <- paste(MAL_demons$synopsis, collapse = " "),
MAL_drama_t <- paste(MAL_drama$synopsis, collapse = " "),
MAL_ecchi_t <- paste(MAL_ecchi$synopsis, collapse = " "),
MAL_fantasy_t <- paste(MAL_fantasy$synopsis, collapse = " "),
MAL_game_t <- paste(MAL_game$synopsis, collapse = " "),
MAL_harem_t <- paste(MAL_harem$synopsis, collapse = " "),
MAL_historical_t <- paste(MAL_historical$synopsis, collapse = " "),
MAL_horror_t <- paste(MAL_horror$synopsis, collapse = " "),
MAL_josei_t <- paste(MAL_josei$synopsis, collapse = " "),
MAL_kids_t <- paste(MAL_kids$synopsis, collapse = " "),
MAL_magic_t <- paste(MAL_magic$synopsis, collapse = " "),
MAL_martialarts_t <- paste(MAL_martialarts$synopsis, collapse = " "),
MAL_mecha_t <- paste(MAL_mecha$synopsis, collapse = " "),
MAL_military_t <- paste(MAL_military$synopsis, collapse = " "),
MAL_music_t <- paste(MAL_music$synopsis, collapse = " "),
MAL_mystery_t <- paste(MAL_mystery$synopsis, collapse = " "),
MAL_nogenres_t <- paste(MAL_nogenres$synopsis, collapse = " "),
MAL_parody_t <- paste(MAL_parody$synopsis, collapse = " "),
MAL_police_t <- paste(MAL_police$synopsis, collapse = " "),
MAL_psychological_t <- paste(MAL_psychological$synopsis, collapse = " "),
MAL_romance_t <- paste(MAL_romance$synopsis, collapse = " "),
MAL_samurai_t <- paste(MAL_samurai$synopsis, collapse = " "),
MAL_school_t <- paste(MAL_school$samurai, collapse = " "),
MAL_scifi_t <- paste(MAL_scifi$synopsis, collapse = " "),
MAL_seinen_t <- paste(MAL_seinen$synopsis, collapse = " "),
MAL_shoujo_t <- paste(MAL_shoujo$synopsis, collapse = " "),
MAL_shoujo.ai_t <- paste(MAL_shoujo.ai$synopsis, collapse = " "),
MAL_shounen_t <- paste(MAL_shounen$synopsis, collapse = " "),
MAL_shounenai_t <- paste(MAL_shounenai$synopsis, collapse = " "),
MAL_sliceoflife_t <- paste(MAL_sliceoflife$synopsis, collapse = " "),
MAL_space_t <- paste(MAL_space$synopsis, collapse = " "),
MAL_supernatural_t <- paste(MAL_supernatural$synopsis, collapse = " "),
MAL_superpower_t <- paste(MAL_superpower$synopsis, collapse = " "),
MAL_thriller_t <- paste(MAL_thriller$synopsis, collapse = " "),
MAL_vampire_t <- paste(MAL_vampire$synopsis, collapse = " "),
MAL_yaoi_t <- paste(MAL_yaoi$synopsis, collapse = " "),
MAL_yuri_t <- paste(MAL_yuri$synopsis, collapse = " ")
)
docs <- Corpus(all_texts)
summary(docs)
genre_list <- c("MAL_action","MAL_adventure","MAL_cars","MAL_comedy","MAL_dementia", "MAL_demons", "MAL_drama", "MAL_ecchi", "MAL_fantasy", "MAL_game", "MAL_harem", "MAL_historical", "MAL_horror", "MAL_josei", "MAL_kids", "MAL_magic", "MAL_martialarts", "MAL_mecha", "MAL_military", "MAL_music", "MAL_mystery", "MAL_nogenres", "MAL_parody", "MAL_police", "MAL_psychological","MAL_romance", "MAL_samurai", "MAL_school", "MAL_scifi", "MAL_seinen", "MAL_shoujo", "MAL_shoujo.ai", "MAL_shounen", "MAL_shounenai", "MAL_sliceoflife", "MAL_space", "MAL_supernatural", "MAL_superpower", "MAL_thriller", "MAL_vampire", "MAL_yaoi", "MAL_yuri")
for( i in 1:length(all_texts)){
write(all_texts[[i]], file = paste(genre_list[i], ".txt"))
}
path_n <- "/raw_text/"
dir(path_n)
path_n <- "raw_text"
dir(path_n)
path_n <- "raw_text"
docs <- Corpus(DirSource(path_n))
summary(docs)
library(ggplot2)
library(wordcloud)
library(tm)
library(stringr)
library(ggthemes)
library(cluster)
library(dendextend)
library(SnowballC)
install.packages("SnowballC")
library(ggplot2)
library(wordcloud)
library(tm)
library(stringr)
library(ggthemes)
library(cluster)
library(dendextend)
library(SnowballC)
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removeWords,c("source", "anidb", "ann", "mal"))
docs <- tm_map(docs, stemDocument)
docs <- tm_map(docs, PlainTextDocument)
dtm <- DocumentTermMatrix(docs) ; dtm
dtms <- removeSparseTerms(dtm, 0.1)
inspect(dtms)
findFreqTerms(dtm, lowfreq=50)
wf <- data.frame(word=names(freq), freq=freq)
head(wf)
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf <- data.frame(word=names(freq), freq=freq)
head(wf)
findAssocs(dtms, c("girl", "power","love","likes","school", "club"), corlimit=0.90)
findAssocs(dtms, c("girl", "power","love","likes","school", "club", "boy"), corlimit=0.90)
findAssocs(dtms, c("girl", "power","love","likes","school", "boy", "sweet"), corlimit=0.90)
setwd("~/Documents/pds_fin/MALDataScience/Rcode")
head(freq)
head(freq,20)
docs <- tm_map(docs, removeWords,c("source", "anidb", "ann", "mal", "written"))
dtm <- DocumentTermMatrix(docs) ; dtm
dtms <- removeSparseTerms(dtm, 0.1)
inspect(dtms)
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf <- data.frame(word=names(freq), freq=freq)
head(wf)
head(freq,20)
topWords <- ("one", "world", "will", "new", "school", "life", "however", "girl", "friends", "two", "day", "now", "series", "can", "story", "young", "time", "first", "years", "mysterious")
findAssocs(dtms, c("girl", "power","love","likes","school", "boy"), corlimit=0.90)
topWords <- c("one", "world", "will", "new", "school", "life", "however","girl", "friends", "two", "day", "now", "series", "can", "story","young", "time", "first", "years", "mysterious")
findAssocs(dtms, c("girl", "power","love","likes","school", "boy"), corlimit=0.90)
findAssocs(dtms, topWords, corlimit = 0.98)
